function trials = generateTrials()design_info = jsondecode(fread(fopen('configs.json'),'*char'));design_info = design_info.design_info;design_info.gamble_durations = design_info.gamble_durations';design_info.gambles_per_trial = design_info.gambles_per_trial';% gamble set (non-repeating)gains = design_info.payoff_unit:design_info.payoff_unit:design_info.max_payoff;losss = -gains;[gains, losss] = meshgrid(gains,losss);gambleSet = [gains(:), losss(:)];% gamble set (full design), set basic info and principle gambletrialPool(size(gambleSet, 1)*design_info.sure_rewards_per_gamble.*length(design_info.gamble_durations)) = trial();for i_gamble = 1:size(gambleSet, 1)    sure_rewardCandidate = round(linspace(gambleSet(i_gamble, 1),gambleSet(i_gamble, 2),design_info.sure_rewards_per_gamble));    for i_sure_reward = 1:design_info.sure_rewards_per_gamble        for i_gamble_duration = 1:length(design_info.gamble_durations)            tempTrial = trialPool((i_gamble-1).*design_info.sure_rewards_per_gamble.*length(design_info.gamble_durations) + (i_sure_reward-1).*length(design_info.gamble_durations) + i_gamble_duration);                        tempTrial.gambles = gambleSet(i_gamble, :);            tempTrial.sure_reward = sure_rewardCandidate(i_sure_reward);            tempTrial.gamble_duration = design_info.gamble_durations(i_gamble_duration);        end    endend% attribute numbers of gamblestempIndices = randperm(length(trialPool));tempIndSeg = linspace(1, length(trialPool), length(design_info.gambles_per_trial) + 1);gamblesNeeded = 0;for i_n_gambles = 1:length(design_info.gambles_per_trial)    for i_tempIndeces = ceil(tempIndSeg(i_n_gambles)):floor(tempIndSeg(i_n_gambles + 1))        trialPool(tempIndices(i_tempIndeces)).n_gambles = i_n_gambles;        gamblesNeeded = gamblesNeeded + i_n_gambles;    endend% set all gamblestempGambleSet = repmat(gambleSet,floor(gamblesNeeded/length(gambleSet)),1);if mod(length(tempGambleSet), length(gambleSet)) ~= 0    tempGambleSet = [tempGambleSet; gambleSet(randperm(length(gambleSet), mod(length(tempGambleSet), length(gambleSet))), :)];endneedAllocation = 1;while needAllocation    needAllocation = 0;    for i_trial = 1:length(trialPool)        for i_gamble = 1:(trialPool(i_trial).n_gambles - 1)            while 1                gamblePopInd = randi(length(tempGambleSet));                if ~any(all(tempGambleSet(gamblePopInd, :) == trialPool(i_trial).gambles, 2))                    trialPool(i_trial).gambles = [tempGambleSet(gamblePopInd, :); trialPool(i_trial).gambles];                    tempGambleSet(gamblePopInd, :) = [];                    break                end                if isempty(tempGambleSet)                    needAllocation = 1;                end            end        end    endend% pack trials into blockssub_id = evalin('base', 'sub_id');subSeq = evalin('base', 'subSeq');trialPool = trialPool(randperm(length(trialPool)));latinDesign = latsq(length(design_info.gamble_durations));%%% codingsubLatinOrder = latinDesign(mod(subSeq, size(latinDesign, 1)) + 1, [1:end, end:-1:1]);%%% codingduration_set_order = design_info.gamble_durations();trials(length(trialPool),1) = trial();i_trial = 1;for i_block = 1:length(duration_set_order)*design_info.blocks_per_duration    filledIn = 0;    for i_tempTrial = 1:length(trialPool)        if trialPool(i_tempTrial).gamble_duration == design_info.gamble_durations(subLatinOrder(i_block)) && isempty(trialPool(i_tempTrial).block_id)            trials(i_trial) = trialPool(i_tempTrial);            trials(i_trial).trial_id = i_trial;            trials(i_trial).block_id = i_block;                        trials(i_trial).sub_id = sub_id;            trials(i_trial).sub_sex = evalin('base', 'sub_sex');            trials(i_trial).sub_age = evalin('base', 'sub_age');                        trials(i_trial).gain_on_left = randi(2) - 1;                        i_trial = i_trial + 1;            filledIn = filledIn + 1;            if filledIn == length(trialPool)/length(design_info.gamble_durations)/design_info.blocks_per_duration                break            end        end    endendassignin('base', 'design_info', design_info);function sq = latsq(N)    sq = [1:ceil(N/2), N:-1:ceil(N/2) + 1; ones(N-1, N)];    sq(:,[1:2:N,2:2:N]) = sq(:, :);    sq = rem(cumsum(sq)-1,N) + 1;    if mod(N, 2) == 1        sq = [sq; sq(:, N:-1:1)];    endendend